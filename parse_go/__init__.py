###
# AUTHORS: CHRISTIAN GIBSON, 
# PROJECT: PARSE GO
# UPDATED: MARCH 15, 2015
# USAGE:   from parse_go import parse_obo ; go = parse_obo()
# EXPECTS: python 2.7.6
#          networkx 1.9.1
###

from pympler.asizeof import asizeof
import multiprocessing
import collections
import threading
import traceback
import itertools
import datetime
import networkx
import ctypes
import psutil
import Queue
import time
import json
import math
import sys

class parse_obo():
    def __init__(self, weights={'is_a' : 1, 'part_of' : 2, 'regulates' : 5},
                       obo_root=['GO:0003674', 'GO:0005575', 'GO:0008150'],
                       obo_relations=['is_a', 'part_of', 'regulates'],
                       obo_disjoint=['is_a'],
                       obo_path=None,
                       save_detail=False):
        # Note: the algorithms herein assume that those terms in
        #   self.obo_root are root nodes for the entire go graph,
        #   and that the relations listed in self.obo_relations
        #   are used to traverse the go ontology. self.obo_disjoint
        #   contains those relations that separate the go ontology
        #   into disjoint ontologies that link to a single root.
        #   It should be a proper subset of self.obo_relations.
        self.weights = weights
        self.obo_root = obo_root
        self.obo_relations = frozenset(obo_relations)
        self.obo_disjoint = []
        for d in obo_disjoint:
            if d in self.obo_relations:
                self.obo_disjoint.append(d)
        self.obo_header = {}
        self.obo_detail = {}
        self.obo_graph = networkx.DiGraph()
        self.obo_path = obo_path
        self.save_detail = save_detail
        obo_handle = self._prepare_file(self.obo_path)
        try:
            self._parse_file(obo_handle, self.save_detail)
        except:
            print traceback.format_exc()
            pass
        finally:
            obo_handle.close()
        self.__uncc_test_list = ['GO:0046439', 'GO:0034605', 'GO:0030123',
                                 'GO:0005838', 'GO:0005839', 'GO:0005834',
                                 'GO:0051493', 'GO:0005833', 'GO:0003735',
                                 'GO:0007088', 'GO:0004140', 'GO:0017176',
                                 'GO:0017174', 'GO:0017172', 'GO:0006281',
                                 'GO:0006289', 'GO:0034773', 'GO:0005956',
                                 'GO:0030296', 'GO:0006570', 'GO:0006571',
                                 'GO:0006576', 'GO:0006370', 'GO:0006376',
                                 'GO:0006378', 'GO:0006379', 'GO:0031072',
                                 'GO:0006597', 'GO:0035556', 'GO:0046654',
                                 'GO:0042554', 'GO:0015995', 'GO:0042552',
                                 'GO:0015991', 'GO:0042558', 'GO:0005741',
                                 'GO:0043142', 'GO:0043140', 'GO:0043141',
                                 'GO:0048701', 'GO:0006629', 'GO:0006625',
                                 'GO:0006626', 'GO:0006627', 'GO:0006621',
                                 'GO:0009264', 'GO:0004844', 'GO:0004842',
                                 'GO:0004843', 'GO:0030677', 'GO:0030674',
                                 'GO:0031386', 'GO:0004536', 'GO:0004535',
                                 'GO:0004531', 'GO:0019992', 'GO:0048812',
                                 'GO:0005007', 'GO:0006750', 'GO:0006021',
                                 'GO:0006024', 'GO:0008021', 'GO:0008022',
                                 'GO:0008023', 'GO:0008026', 'GO:0005227',
                                 'GO:0031491', 'GO:0090129', 'GO:0009007',
                                 'GO:0005200', 'GO:0009001', 'GO:0030915',
                                 'GO:0009396', 'GO:0045075', 'GO:0000287',
                                 'GO:0000281', 'GO:0008285', 'GO:0008286',
                                 'GO:0008280', 'GO:0008283', 'GO:0051013',
                                 'GO:0051010', 'GO:0051017', 'GO:0008289',
                                 'GO:0051015', 'GO:0006974', 'GO:0048037',
                                 'GO:0010172', 'GO:0044255', 'GO:0048038',
                                 'GO:0006979', 'GO:0004665', 'GO:0004190',
                                 'GO:0004663', 'GO:0003896', 'GO:0003899',
                                 'GO:0004198', 'GO:0035438', 'GO:0008658',
                                 'GO:0006284', 'GO:0008609', 'GO:0008352',
                                 'GO:0003873', 'GO:0003870', 'GO:0003871',
                                 'GO:0003876', 'GO:0015183', 'GO:0001726',
                                 'GO:0004061', 'GO:0004064', 'GO:0004066',
                                 'GO:0019211', 'GO:0051276', 'GO:0016638',
                                 'GO:0016639', 'GO:0033539', 'GO:0016987',
                                 'GO:0070403', 'GO:0009073', 'GO:0019363',
                                 'GO:0047750', 'GO:0007160', 'GO:0007165',
                                 'GO:0007166', 'GO:0007169', 'GO:0016180',
                                 'GO:0016742', 'GO:0016743', 'GO:0016740',
                                 'GO:0045666', 'GO:0016746', 'GO:0016747',
                                 'GO:0019773', 'GO:0070531', 'GO:0047134',
                                 'GO:0018298', 'GO:0019898', 'GO:0005829',
                                 'GO:0005828', 'GO:0043547', 'GO:0016567',
                                 'GO:0016560', 'GO:0071203', 'GO:0016298',
                                 'GO:0016568', 'GO:0015851', 'GO:0006298',
                                 'GO:0030288', 'GO:0046080', 'GO:0030286',
                                 'GO:0030285', 'GO:0005925', 'GO:0005922',
                                 'GO:0005923', 'GO:0034709', 'GO:0006563',
                                 'GO:0006562', 'GO:0006561', 'GO:0006569',
                                 'GO:0006360', 'GO:0006364', 'GO:0006367',
                                 'GO:0006366', 'GO:0006368', 'GO:0007186',
                                 'GO:0006914', 'GO:0060271', 'GO:0017013',
                                 'GO:0050790', 'GO:0050796', 'GO:0006913',
                                 'GO:0060070', 'GO:0060072', 'GO:0035014',
                                 'GO:0046660', 'GO:0042545', 'GO:0008198',
                                 'GO:0015986', 'GO:0052862', 'GO:0052861',
                                 'GO:0005727', 'GO:0009058', 'GO:0043154',
                                 'GO:0006102', 'GO:0006108', 'GO:0006633',
                                 'GO:0006631', 'GO:0006637', 'GO:0006635',
                                 'GO:0030688', 'GO:0004859', 'GO:0009253',
                                 'GO:0004857', 'GO:0004853', 'GO:0004852',
                                 'GO:0030667', 'GO:0005581', 'GO:0004525',
                                 'GO:0016874', 'GO:0004527', 'GO:0004526',
                                 'GO:0004521', 'GO:0004523', 'GO:0000775',
                                 'GO:0006749', 'GO:0031396', 'GO:0006030',
                                 'GO:0006744', 'GO:0006742', 'GO:0006741',
                                 'GO:0009039', 'GO:0008033', 'GO:0005219',
                                 'GO:0005215', 'GO:0005216', 'GO:0018342',
                                 'GO:0005212', 'GO:0018343', 'GO:0000293',
                                 'GO:0071595', 'GO:0000290', 'GO:0042719',
                                 'GO:0005097', 'GO:0004298', 'GO:0004451',
                                 'GO:0004450', 'GO:0004452', 'GO:0004455',
                                 'GO:0048730', 'GO:0005102', 'GO:0033743',
                                 'GO:0004643', 'GO:0009451', 'GO:0009107',
                                 'GO:0009103', 'GO:0031532', 'GO:0004181',
                                 'GO:0004180', 'GO:0004185', 'GO:0030071',
                                 'GO:0004675', 'GO:0004674', 'GO:0003885',
                                 'GO:0004671', 'GO:0004672', 'GO:0004679',
                                 'GO:0009877', 'GO:0018112', 'GO:0003868',
                                 'GO:0042555', 'GO:0001733', 'GO:0008616',
                                 'GO:0008615', 'GO:0008612', 'GO:0003867',
                                 'GO:0008610', 'GO:0007507', 'GO:0036157',
                                 'GO:0036158', 'GO:0008299', 'GO:0070652',
                                 'GO:0004077', 'GO:0004075', 'GO:0008290',
                                 'GO:0008295', 'GO:0019226', 'GO:0032439',
                                 'GO:0042254', 'GO:0032580', 'GO:0071436',
                                 'GO:0007218', 'GO:0051205', 'GO:0015081',
                                 'GO:0016998', 'GO:0071929', 'GO:0007213',
                                 'GO:0008509', 'GO:0008508', 'GO:0007217',
                                 'GO:0046873', 'GO:0046872', 'GO:0015716',
                                 'GO:0019646', 'GO:0007172', 'GO:0007179',
                                 'GO:0007178', 'GO:0016197', 'GO:0016192',
                                 'GO:0003917', 'GO:0003916', 'GO:0003777',
                                 'GO:0016757', 'GO:0016756', 'GO:0008378',
                                 'GO:0001919', 'GO:0045494', 'GO:0008270',
                                 'GO:0033897', 'GO:0042393', 'GO:0016175',
                                 'GO:2000813', 'GO:0008374', 'GO:0042157',
                                 'GO:0003676', 'GO:0003677', 'GO:0003678',
                                 'GO:0005856', 'GO:0005852', 'GO:0005853',
                                 'GO:0005850', 'GO:0016286', 'GO:0005858',
                                 'GO:0003918', 'GO:0030870', 'GO:0016570',
                                 'GO:0016573', 'GO:0016572', 'GO:0016579',
                                 'GO:0045261', 'GO:0000166', 'GO:0045263',
                                 'GO:0034715', 'GO:0005938', 'GO:0030274',
                                 'GO:0007205', 'GO:0043093', 'GO:0006355',
                                 'GO:0006357', 'GO:0006351', 'GO:0006352',
                                 'GO:0006353', 'GO:0017025', 'GO:0010923',
                                 'GO:0031011', 'GO:0017022', 'GO:0009611',
                                 'GO:0042578', 'GO:0046677', 'GO:0009612',
                                 'GO:0030011', 'GO:0005737', 'GO:0043169',
                                 'GO:0046381', 'GO:0005730', 'GO:0043161',
                                 'GO:0043162', 'GO:0005739', 'GO:0036459',
                                 'GO:0017158', 'GO:0017150', 'GO:0017153',
                                 'GO:0003697', 'GO:0017157', 'GO:0006644',
                                 'GO:0030247', 'GO:0004861', 'GO:0004862',
                                 'GO:0004864', 'GO:0004866', 'GO:0004867',
                                 'GO:0030122', 'GO:0004869', 'GO:0030983',
                                 'GO:0030126', 'GO:0030127', 'GO:0004512',
                                 'GO:0004514', 'GO:0015889', 'GO:0004517',
                                 'GO:0004518', 'GO:0004519', 'GO:0005021',
                                 'GO:0030496', 'GO:0005026', 'GO:0005024',
                                 'GO:0031388', 'GO:0006006', 'GO:0006007',
                                 'GO:0006000', 'GO:0006003', 'GO:0005201',
                                 'GO:0016992', 'GO:0010309', 'GO:0045017',
                                 'GO:0090389', 'GO:0006919', 'GO:0008757',
                                 'GO:1902475', 'GO:0006915', 'GO:0008977',
                                 'GO:0008750', 'GO:0009113', 'GO:0008199',
                                 'GO:0009116', 'GO:0008190', 'GO:0008191',
                                 'GO:0008193', 'GO:0000774', 'GO:0008195',
                                 'GO:0000776', 'GO:0004649', 'GO:0000178',
                                 'GO:0000179', 'GO:0018344', 'GO:0000172',
                                 'GO:0045121', 'GO:0000176', 'GO:0004645',
                                 'GO:0000175', 'GO:0004888', 'GO:0050662',
                                 'GO:0008236', 'GO:0006820', 'GO:0006821',
                                 'GO:0006826', 'GO:0006825', 'GO:0003854',
                                 'GO:0008375', 'GO:0008376', 'GO:0003857',
                                 'GO:0006546', 'GO:0008373', 'GO:0009755',
                                 'GO:0007517', 'GO:0019509', 'GO:0033180',
                                 'GO:0015238', 'GO:0003989', 'GO:0004089',
                                 'GO:0003983', 'GO:0003980', 'GO:0005576',
                                 'GO:0019722', 'GO:0000502', 'GO:0008144',
                                 'GO:0015095', 'GO:0040034', 'GO:0016614',
                                 'GO:0016615', 'GO:0016616', 'GO:0071918',
                                 'GO:0019432', 'GO:0046849', 'GO:0046847',
                                 'GO:0072487', 'GO:0038062', 'GO:0072488',
                                 'GO:0035058', 'GO:0007346', 'GO:0007340',
                                 'GO:0007342', 'GO:0008406', 'GO:0016765',
                                 'GO:0019239', 'GO:0016763', 'GO:0015416',
                                 'GO:0050113', 'GO:0031625', 'GO:0016768',
                                 'GO:0019236', 'GO:0000981', 'GO:0042384',
                                 'GO:0016149', 'GO:0043395', 'GO:0042147',
                                 'GO:0034498', 'GO:0005845', 'GO:0043550',
                                 'GO:0005847', 'GO:0005846', 'GO:0005840',
                                 'GO:0005849', 'GO:0045735', 'GO:0045739',
                                 'GO:0071008', 'GO:0050808', 'GO:0030261',
                                 'GO:0012511', 'GO:0043087', 'GO:0043085',
                                 'GO:0006348', 'GO:0042127', 'GO:0031023',
                                 'GO:0001104', 'GO:0030001', 'GO:0005976',
                                 'GO:0006122', 'GO:0006120', 'GO:0003689',
                                 'GO:0003688', 'GO:0017147', 'GO:0003682',
                                 'GO:0003684', 'GO:0000187', 'GO:0000184',
                                 'GO:0009236', 'GO:0009235', 'GO:0006659',
                                 'GO:0006658', 'GO:0009231', 'GO:0004872',
                                 'GO:0004871', 'GO:0030131', 'GO:0030130',
                                 'GO:0030133', 'GO:0030132', 'GO:0030136',
                                 'GO:0030488', 'GO:0050661', 'GO:0050660',
                                 'GO:0005057', 'GO:0006013', 'GO:0006012',
                                 'GO:0006011', 'GO:0005694', 'GO:0048666',
                                 'GO:0048662', 'GO:0048193', 'GO:0008408',
                                 'GO:0042773', 'GO:0004478', 'GO:0004471',
                                 'GO:0004476', 'GO:0004474', 'GO:0048280',
                                 'GO:0006479', 'GO:0006909', 'GO:0005787',
                                 'GO:0008745', 'GO:0006904', 'GO:0008963',
                                 'GO:0008964', 'GO:0009166', 'GO:0009165',
                                 'GO:0008188', 'GO:0006772', 'GO:0008184',
                                 'GO:0008180', 'GO:0042602', 'GO:0004659',
                                 'GO:0031514', 'GO:0000160', 'GO:0004655',
                                 'GO:0045132', 'GO:0000164', 'GO:0004650',
                                 'GO:0033014', 'GO:0015992', 'GO:0008360',
                                 'GO:0003847', 'GO:0006836', 'GO:0003849',
                                 'GO:0005789', 'GO:0016853', 'GO:0016818',
                                 'GO:0019538', 'GO:0016813', 'GO:0016810',
                                 'GO:0016811', 'GO:0070985', 'GO:0016814',
                                 'GO:0000982', 'GO:0003998', 'GO:0004096',
                                 'GO:0003995', 'GO:0003994', 'GO:0003997',
                                 'GO:0003993', 'GO:0019089', 'GO:0019083',
                                 'GO:0051225', 'GO:0016607', 'GO:0016973',
                                 'GO:0016972', 'GO:0016602', 'GO:0070188',
                                 'GO:0001682', 'GO:0004197', 'GO:0046854',
                                 'GO:0050290', 'GO:0032259', 'GO:0019882',
                                 'GO:0019887', 'GO:0043410', 'GO:0043419',
                                 'GO:0008418', 'GO:0016779', 'GO:0051539',
                                 'GO:0016773', 'GO:0008410', 'GO:0051536',
                                 'GO:0051537', 'GO:0008417', 'GO:0009966',
                                 'GO:0000976', 'GO:0000975', 'GO:0071586',
                                 'GO:0000978', 'GO:0015171', 'GO:0070569',
                                 'GO:0016153', 'GO:0016151', 'GO:0072588',
                                 'GO:0016158', 'GO:0042176', 'GO:0005871',
                                 'GO:0005874', 'GO:0005875', 'GO:0005876',
                                 'GO:0043564', 'GO:0043565', 'GO:0016559',
                                 'GO:0016558', 'GO:0034551', 'GO:0033270',
                                 'GO:0042289', 'GO:0022904', 'GO:0030254',
                                 'GO:0030255', 'GO:0030257', 'GO:0005913',
                                 'GO:0030259', 'GO:0006338', 'GO:0006334',
                                 'GO:0006333', 'GO:0046474', 'GO:0017048',
                                 'GO:0003872', 'GO:0043631', 'GO:0035280',
                                 'GO:0050909', 'GO:0003979', 'GO:0006481',
                                 'GO:0006482', 'GO:0003978', 'GO:0006486',
                                 'GO:0006487', 'GO:0006415', 'GO:0043189',
                                 'GO:0006241', 'GO:0007276', 'GO:0090090',
                                 'GO:0006468', 'GO:0006469', 'GO:0009229',
                                 'GO:0009225', 'GO:0006461', 'GO:0006464',
                                 'GO:0006465', 'GO:0010389', 'GO:0009913',
                                 'GO:0005044', 'GO:0005047', 'GO:0035197',
                                 'GO:0046294', 'GO:0006066', 'GO:0006796',
                                 'GO:0005685', 'GO:0005681', 'GO:0005680',
                                 'GO:0005267', 'GO:0005261', 'GO:0005262',
                                 'GO:0032212', 'GO:0035145', 'GO:0045039',
                                 'GO:0004799', 'GO:0042765', 'GO:0004797',
                                 'GO:0004791', 'GO:0004408', 'GO:0004402',
                                 'GO:0016311', 'GO:0006661', 'GO:0006662',
                                 'GO:0006665', 'GO:0005319', 'GO:0051056',
                                 'GO:0004222', 'GO:0006935', 'GO:0006937',
                                 'GO:0043968', 'GO:0006939', 'GO:0005313',
                                 'GO:0005315', 'GO:0008173', 'GO:0008170',
                                 'GO:0008171', 'GO:0008176', 'GO:0000795',
                                 'GO:0042612', 'GO:0000390', 'GO:0008889',
                                 'GO:0000154', 'GO:0008887', 'GO:0000150',
                                 'GO:0000151', 'GO:1902396', 'GO:0004139',
                                 'GO:0004134', 'GO:0004135', 'GO:0098519',
                                 'GO:0006807', 'GO:0008312', 'GO:0006801',
                                 'GO:0003830', 'GO:0006808', 'GO:0006809',
                                 'GO:0008318', 'GO:0003839', 'GO:0046912',
                                 'GO:0008083', 'GO:0046914', 'GO:0008081',
                                 'GO:0044341', 'GO:0016805', 'GO:0005415',
                                 'GO:0003942', 'GO:0071973', 'GO:0007224',
                                 'GO:0043984', 'GO:0004559', 'GO:0015385',
                                 'GO:0033596', 'GO:0072669', 'GO:0019894',
                                 'GO:0032065', 'GO:0070176', 'GO:0031515',
                                 'GO:0043401', 'GO:0016491', 'GO:0000413',
                                 'GO:0071805', 'GO:0016706', 'GO:0008425',
                                 'GO:0016705', 'GO:0016702', 'GO:0016701',
                                 'GO:0032403', 'GO:0001784', 'GO:0016125',
                                 'GO:0042162', 'GO:0005869', 'GO:0005868',
                                 'GO:0005861', 'GO:0008519', 'GO:0007032',
                                 'GO:0007030', 'GO:0007031', 'GO:0016012',
                                 'GO:0016010', 'GO:0071025', 'GO:0033130',
                                 'GO:0030246', 'GO:0030244', 'GO:0006325',
                                 'GO:0017056', 'GO:0032324', 'GO:0017053',
                                 'GO:0030027', 'GO:0017137', 'GO:0050912',
                                 'GO:0017134', 'GO:0035299', 'GO:0042586',
                                 'GO:0015948', 'GO:0008898', 'GO:0043190',
                                 'GO:0006493', 'GO:0006491', 'GO:0031571',
                                 'GO:0046961', 'GO:0006499', 'GO:0006259',
                                 'GO:0000149', 'GO:0005786', 'GO:0006478',
                                 'GO:0005784', 'GO:0005785', 'GO:0009214',
                                 'GO:0005783', 'GO:0006471', 'GO:0006470',
                                 'GO:0048468', 'GO:0005788', 'GO:0004363',
                                 'GO:0030117', 'GO:0030119', 'GO:0009968',
                                 'GO:0036128', 'GO:0006783', 'GO:0006784',
                                 'GO:0005672', 'GO:0005673', 'GO:0022900',
                                 'GO:0006071', 'GO:0005674', 'GO:0006072',
                                 'GO:0005098', 'GO:0005099', 'GO:0005092',
                                 'GO:0005096', 'GO:0000090', 'GO:0005094',
                                 'GO:0009360', 'GO:0004788', 'GO:0004308',
                                 'GO:0004784', 'GO:0004781', 'GO:0004418',
                                 'GO:0004415', 'GO:0004416', 'GO:0004411',
                                 'GO:0016598', 'GO:0006672', 'GO:0008940',
                                 'GO:0005328', 'GO:0008762', 'GO:0008760',
                                 'GO:0008948', 'GO:0000785', 'GO:0000784',
                                 'GO:0000786', 'GO:0008168', 'GO:0042626',
                                 'GO:0008899', 'GO:0045116', 'GO:0000145',
                                 'GO:0042623', 'GO:0008897', 'GO:0008892',
                                 'GO:0003725', 'GO:0005523', 'GO:0005520',
                                 'GO:0005524', 'GO:0005525', 'GO:0004129',
                                 'GO:0006813', 'GO:0006812', 'GO:0006811',
                                 'GO:0006810', 'GO:0006817', 'GO:0004127',
                                 'GO:0006814', 'GO:0003824', 'GO:0008301',
                                 'GO:0008094', 'GO:0008097', 'GO:0070966',
                                 'GO:0008093', 'GO:0008092', 'GO:0016836',
                                 'GO:0051033', 'GO:0097056', 'GO:0018738',
                                 'GO:0003729', 'GO:0045582', 'GO:0003951',
                                 'GO:0003950', 'GO:0003953', 'GO:0008235',
                                 'GO:0003954', 'GO:0008237', 'GO:0008540',
                                 'GO:0007250', 'GO:0051085', 'GO:0051087',
                                 'GO:0051082', 'GO:0046836', 'GO:0080048',
                                 'GO:0046839', 'GO:0042802', 'GO:0042803',
                                 'GO:0032502', 'GO:0038032', 'GO:0070140',
                                 'GO:0033588', 'GO:0007339', 'GO:0016485',
                                 'GO:0016486', 'GO:0016480', 'GO:0008430',
                                 'GO:0046907', 'GO:0071816', 'GO:0016715',
                                 'GO:0016714', 'GO:0016717', 'GO:0044183',
                                 'GO:0032183', 'GO:0015116', 'GO:0015114',
                                 'GO:0051297', 'GO:0000737', 'GO:0015629',
                                 'GO:0016831', 'GO:0005890', 'GO:0005891',
                                 'GO:0043507', 'GO:0019281', 'GO:0007021',
                                 'GO:0007020', 'GO:0007023', 'GO:0030833',
                                 'GO:0030835', 'GO:0032981', 'GO:0007029',
                                 'GO:0045765', 'GO:0010508', 'GO:0010506',
                                 'GO:0050852', 'GO:0016161', 'GO:0004506',
                                 'GO:0030234', 'GO:0016226', 'GO:0034220',
                                 'GO:0034227', 'GO:0042025', 'GO:0006310',
                                 'GO:0006313', 'GO:0051726', 'GO:0004601',
                                 'GO:0030904', 'GO:0071630', 'GO:0030908',
                                 'GO:0045905', 'GO:0035064', 'GO:0045901',
                                 'GO:0061025', 'GO:0015977', 'GO:0035267',
                                 'GO:0015979', 'GO:0072546', 'GO:0006265',
                                 'GO:0006260', 'GO:0006261', 'GO:0030896',
                                 'GO:0006269', 'GO:0005795', 'GO:0005794',
                                 'GO:0031966', 'GO:0030695', 'GO:0030163',
                                 'GO:0048870', 'GO:0009976', 'GO:0006044',
                                 'GO:0006047', 'GO:0017069', 'GO:0005663',
                                 'GO:0043039', 'GO:0005665', 'GO:0005664',
                                 'GO:0005667', 'GO:0005666', 'GO:0005669',
                                 'GO:0005089', 'GO:0048749', 'GO:0009378',
                                 'GO:0009372', 'GO:0005083', 'GO:0005085',
                                 'GO:0005086', 'GO:0000221', 'GO:0000226',
                                 'GO:0005272', 'GO:0000228', 'GO:0004375',
                                 'GO:0008233', 'GO:0004420', 'GO:0004421',
                                 'GO:0004930', 'GO:0050709', 'GO:0004427',
                                 'GO:0008234', 'GO:0006683', 'GO:0048478',
                                 'GO:0003956', 'GO:0005337', 'GO:0009159',
                                 'GO:0008156', 'GO:0009425', 'GO:0008152',
                                 'GO:0042632', 'GO:0008158', 'GO:0016114',
                                 'GO:0004683', 'GO:0000139', 'GO:0004334',
                                 'GO:0002218', 'GO:0004336', 'GO:0004332',
                                 'GO:0005248', 'GO:0005247', 'GO:0005245',
                                 'GO:0005242', 'GO:0006869', 'GO:0003810',
                                 'GO:0006865', 'GO:0004113', 'GO:0009790',
                                 'GO:0098536', 'GO:0098535', 'GO:0045226',
                                 'GO:0031419', 'GO:0031418', 'GO:0016820',
                                 'GO:0018094', 'GO:0018095', 'GO:0046933',
                                 'GO:0000042', 'GO:0016829', 'GO:0000046',
                                 'GO:0000045', 'GO:0004751', 'GO:0015297',
                                 'GO:0004803', 'GO:0019079', 'GO:0015299',
                                 'GO:0004372', 'GO:0045596', 'GO:0003968',
                                 'GO:0003964', 'GO:0016925', 'GO:0008200',
                                 'GO:0008201', 'GO:0016920', 'GO:0008203',
                                 'GO:0051092', 'GO:0036038', 'GO:0051090',
                                 'GO:0019478', 'GO:0070772', 'GO:0070776',
                                 'GO:0032264', 'GO:0042813', 'GO:0090399',
                                 'GO:0031931', 'GO:0032040', 'GO:0005929',
                                 'GO:0000439', 'GO:0008440', 'GO:0000940',
                                 'GO:0070552', 'GO:0008449', 'GO:0019277',
                                 'GO:0071557', 'GO:0032465', 'GO:0032467',
                                 'GO:0005921', 'GO:0071558', 'GO:0010468',
                                 'GO:0034453', 'GO:0034450', 'GO:0005881',
                                 'GO:0005883', 'GO:0005882', 'GO:0005885',
                                 'GO:0005887', 'GO:0005886', 'GO:0043515',
                                 'GO:0019295', 'GO:0007015', 'GO:0007016',
                                 'GO:0007017', 'GO:0007010', 'GO:0016581',
                                 'GO:0007018', 'GO:0016032', 'GO:0015031',
                                 'GO:0015030', 'GO:0015035', 'GO:0033151',
                                 'GO:0003796', 'GO:0034219', 'GO:0006306',
                                 'GO:0006303', 'GO:0006302', 'GO:0030913',
                                 'GO:0006309', 'GO:0006308', 'GO:0016459',
                                 'GO:0016272', 'GO:0030599', 'GO:0046332',
                                 'GO:0046330', 'GO:0046488', 'GO:0042325',
                                 'GO:0006278', 'GO:0017183', 'GO:0006270',
                                 'GO:0017187', 'GO:0006275', 'GO:0008061',
                                 'GO:0006452', 'GO:0006450', 'GO:0006457',
                                 'GO:0009890', 'GO:0050277', 'GO:0090266',
                                 'GO:0030177', 'GO:0030176', 'GO:0030170',
                                 'GO:0030173', 'GO:0000334', 'GO:0030178',
                                 'GO:0020037', 'GO:0009882', 'GO:0050144',
                                 'GO:0042256', 'GO:0003779', 'GO:0000339',
                                 'GO:0043022', 'GO:0003774', 'GO:0043027',
                                 'GO:0017070', 'GO:0009306', 'GO:0009307',
                                 'GO:0009303', 'GO:0035307', 'GO:0004435',
                                 'GO:0031083', 'GO:0004430', 'GO:0035091',
                                 'GO:0030576', 'GO:0031012', 'GO:0004657',
                                 'GO:0006695', 'GO:0006694', 'GO:0004656',
                                 'GO:0004654', 'GO:0008140', 'GO:0008146',
                                 'GO:0004652', 'GO:2001070', 'GO:0009415',
                                 'GO:0031513', 'GO:0004697', 'GO:0031227',
                                 'GO:0000124', 'GO:0004329', 'GO:0000126',
                                 'GO:0000120', 'GO:0000123', 'GO:0000122',
                                 'GO:0004322', 'GO:0004326', 'GO:0004325',
                                 'GO:0005509', 'GO:0005506', 'GO:0005507',
                                 'GO:0005501', 'GO:0006879', 'GO:0006874',
                                 'GO:0004109', 'GO:0008324', 'GO:0008855',
                                 'GO:0045211', 'GO:0001558', 'GO:0045214',
                                 'GO:0046923', 'GO:0016857', 'GO:0031429',
                                 'GO:0016851', 'GO:0000055', 'GO:0004749',
                                 'GO:0004748', 'GO:0042799', 'GO:0004743',
                                 'GO:0006164', 'GO:0070498', 'GO:0008219',
                                 'GO:0016936', 'GO:0007275', 'GO:0071949',
                                 'GO:0001882', 'GO:0019441', 'GO:0046813',
                                 'GO:0070701', 'GO:0010181', 'GO:0003922',
                                 'GO:0021915', 'GO:0003924', 'GO:0032039',
                                 'GO:0000444', 'GO:0000445', 'GO:0032983',
                                 'GO:0008455', 'GO:0003747', 'GO:0008452',
                                 'GO:0010452', 'GO:0030837', 'GO:0010457',
                                 'GO:0032320', 'GO:0003840', 'GO:0032456',
                                 'GO:0006835', 'GO:0032328', 'GO:0042132',
                                 'GO:0016433', 'GO:0047325', 'GO:0042138',
                                 'GO:0019911', 'GO:0016592', 'GO:0016597',
                                 'GO:0007005', 'GO:0045786', 'GO:0016021',
                                 'GO:0016020', 'GO:0006730', 'GO:0015002',
                                 'GO:0030212', 'GO:0016206', 'GO:0046034',
                                 'GO:0016209', 'GO:0033926', 'GO:0033925',
                                 'GO:0009607', 'GO:0043234', 'GO:0043236',
                                 'GO:0019825', 'GO:0043231', 'GO:0016442',
                                 'GO:0015914', 'GO:0030335', 'GO:0034061',
                                 'GO:0016817', 'GO:0002161', 'GO:0046355',
                                 'GO:0006206', 'GO:0006207', 'GO:0006200',
                                 'GO:0006426', 'GO:0009887', 'GO:0006425',
                                 'GO:0006422', 'GO:0006423', 'GO:0006420',
                                 'GO:0006421', 'GO:0030141', 'GO:0030144',
                                 'GO:0030145', 'GO:0006429', 'GO:0031167',
                                 'GO:0015825', 'GO:0005643', 'GO:0006511',
                                 'GO:0006516', 'GO:0051965', 'GO:0043014',
                                 'GO:0043015', 'GO:0003746', 'GO:0017089',
                                 'GO:0003743', 'GO:0009317', 'GO:0009311',
                                 'GO:0009312', 'GO:0031305', 'GO:0031307',
                                 'GO:0035335', 'GO:0000209', 'GO:0010212',
                                 'GO:0048786', 'GO:0003700', 'GO:0005351',
                                 'GO:0008138', 'GO:0008137', 'GO:0008134',
                                 'GO:0050429', 'GO:0009408', 'GO:0045145',
                                 'GO:0015144', 'GO:0004359', 'GO:0004356',
                                 'GO:0004357', 'GO:0070830', 'GO:0005516',
                                 'GO:0005515', 'GO:0004590', 'GO:0004591',
                                 'GO:0009086', 'GO:0004594', 'GO:0009082',
                                 'GO:0004176', 'GO:0004177', 'GO:0004174',
                                 'GO:0004175', 'GO:0051382', 'GO:0008047',
                                 'GO:0001525', 'GO:0001522', 'GO:0016844',
                                 'GO:0016846', 'GO:0016841', 'GO:0016849',
                                 'GO:0000062', 'GO:0018279', 'GO:0008565',
                                 'GO:0052547', 'GO:0004003', 'GO:0004000',
                                 'GO:0004001', 'GO:0003906', 'GO:0016901',
                                 'GO:0003904', 'GO:0003905', 'GO:0007269',
                                 'GO:0016907', 'GO:0007267', 'GO:0007265',
                                 'GO:0050080', 'GO:0070481', 'GO:0008649',
                                 'GO:0044238', 'GO:0044237', 'GO:0032313',
                                 'GO:0032312', 'GO:0009405', 'GO:0032021',
                                 'GO:0051568', 'GO:0008460', 'GO:0045900',
                                 'GO:0090537', 'GO:0008661', 'GO:0000922',
                                 'GO:0032330', 'GO:0070008', 'GO:0015655',
                                 'GO:0034477', 'GO:0019901', 'GO:0019900',
                                 'GO:0019902', 'GO:0019905', 'GO:0019904',
                                 'GO:0043531', 'GO:0007076', 'GO:0052725',
                                 'GO:0052726', 'GO:0016055', 'GO:0016052',
                                 'GO:0016051', 'GO:0015012', 'GO:0015016',
                                 'GO:0033554', 'GO:0015018', 'GO:0030203',
                                 'GO:0019835', 'GO:0030975', 'GO:0030976',
                                 'GO:0030971', 'GO:0019838', 'GO:0016477',
                                 'GO:0016471', 'GO:0035253', 'GO:0016301',
                                 'GO:0016307', 'GO:0005452', 'GO:0006189',
                                 'GO:0006184', 'GO:0042302', 'GO:0006183',
                                 'GO:0006182', 'GO:0051603', 'GO:0051607',
                                 'GO:0006213', 'GO:0033178', 'GO:0043047',
                                 'GO:0016624', 'GO:0033177', 'GO:0008601',
                                 'GO:0006434', 'GO:0003714', 'GO:0031932',
                                 'GO:0006430', 'GO:0006433', 'GO:0006432',
                                 'GO:0003713', 'GO:0035435', 'GO:0035434',
                                 'GO:0006438', 'GO:0030151', 'GO:0030150',
                                 'GO:0016627', 'GO:0046777', 'GO:0008685',
                                 'GO:0042273', 'GO:0005638', 'GO:0005639',
                                 'GO:0005980', 'GO:0005637', 'GO:0005634',
                                 'GO:0043001', 'GO:0006505', 'GO:0003756',
                                 'GO:0003755', 'GO:0006506', 'GO:0006508',
                                 'GO:0006729', 'GO:0009325', 'GO:0000213',
                                 'GO:0009986', 'GO:0006725', 'GO:0009982',
                                 'GO:0030791', 'GO:0035329', 'GO:0005184',
                                 'GO:0005185', 'GO:0030554', 'GO:0005742',
                                 'GO:0005743', 'GO:0005740', 'GO:0097320',
                                 'GO:0005746', 'GO:0005747', 'GO:0005744',
                                 'GO:0016772', 'GO:0003333', 'GO:0048208',
                                 'GO:0009186', 'GO:0008124', 'GO:0008121',
                                 'GO:0005164', 'GO:0005165', 'GO:0009435',
                                 'GO:0009432', 'GO:0031204', 'GO:0000103',
                                 'GO:0031201', 'GO:0004348', 'GO:0015074',
                                 'GO:0004345', 'GO:0004347', 'GO:0004342',
                                 'GO:0006855', 'GO:0004161', 'GO:0006850',
                                 'GO:0007586', 'GO:0004168', 'GO:0008053',
                                 'GO:0009059', 'GO:0001539', 'GO:0009052',
                                 'GO:0009056', 'GO:0016876', 'GO:0009055',
                                 'GO:0000077', 'GO:0000075', 'GO:0000079',
                                 'GO:0015078', 'GO:0004019', 'GO:0051289',
                                 'GO:0051287', 'GO:0004013', 'GO:0004012',
                                 'GO:0004014', 'GO:0004017', 'GO:0004016',
                                 'GO:0007292', 'GO:0055070', 'GO:0008277',
                                 'GO:0008276', 'GO:0003911', 'GO:0003910',
                                 'GO:0003913', 'GO:0008272', 'GO:0008278',
                                 'GO:0003887', 'GO:0009615', 'GO:0004677',
                                 'GO:0018193', 'GO:0003883', 'GO:0032783',
                                 'GO:0032784', 'GO:0008479', 'GO:0008478',
                                 'GO:0008476', 'GO:0008474', 'GO:0000910',
                                 'GO:0000917', 'GO:0070588', 'GO:0008677',
                                 'GO:0032300', 'GO:0019028', 'GO:0042246',
                                 'GO:0032947', 'GO:0007064', 'GO:0007067',
                                 'GO:0007062', 'GO:0016049', 'GO:0016043',
                                 'GO:0016042', 'GO:0051865', 'GO:0071986',
                                 'GO:0032549', 'GO:0032012', 'GO:0032542',
                                 'GO:0046541', 'GO:0046540', 'GO:0016266',
                                 'GO:0016263', 'GO:0033947', 'GO:0051861',
                                 'GO:0051764', 'GO:0030942', 'GO:0043490',
                                 'GO:0016462', 'GO:0016903', 'GO:0034464',
                                 'GO:0015930', 'GO:0034080', 'GO:0015934',
                                 'GO:0015935', 'GO:0015936', 'GO:0015937',
                                 'GO:0030306', 'GO:0016310', 'GO:0007268',
                                 'GO:0044599', 'GO:0034314', 'GO:0006221',
                                 'GO:0006222', 'GO:0007264', 'GO:0097228',
                                 'GO:0006228', 'GO:0047497', 'GO:0046782',
                                 'GO:0033164', 'GO:0044458', 'GO:0046168',
                                 'GO:0031929', 'GO:0031146', 'GO:0031145',
                                 'GO:0031144', 'GO:0045892', 'GO:0045893',
                                 'GO:0030414', 'GO:0004252', 'GO:0006084',
                                 'GO:0006086', 'GO:0005996', 'GO:0005991',
                                 'GO:0005622', 'GO:0003726', 'GO:0006535',
                                 'GO:0003724', 'GO:0006537', 'GO:0008242',
                                 'GO:0003723', 'GO:0045947', 'GO:0030097',
                                 'GO:0030091', 'GO:0009331', 'GO:0000266',
                                 'GO:0045095', 'GO:0010941', 'GO:0031369',
                                 'GO:0004970', 'GO:0009279', 'GO:0005198',
                                 'GO:0005751', 'GO:0005750', 'GO:0005759',
                                 'GO:0005758', 'GO:0006402', 'GO:0006406',
                                 'GO:0005179', 'GO:0004484', 'GO:0008113',
                                 'GO:0004482', 'GO:0004488', 'GO:0004489',
                                 'GO:0031213', 'GO:0042471', 'GO:0004371',
                                 'GO:0004800', 'GO:0004373', 'GO:0004807',
                                 'GO:0004378', 'GO:0004379', 'GO:0004809',
                                 'GO:0004573', 'GO:0004571', 'GO:0004576',
                                 'GO:1902745', 'GO:0004579', 'GO:0005578',
                                 'GO:0001501', 'GO:0001503', 'GO:0008060',
                                 'GO:0046975', 'GO:0008063', 'GO:0016866',
                                 'GO:0010040', 'GO:0009045', 'GO:0004714',
                                 'GO:0004715', 'GO:0004712', 'GO:0004713',
                                 'GO:0005375', 'GO:0009190', 'GO:0004719',
                                 'GO:0051298', 'GO:0008241', 'GO:0004026',
                                 'GO:0004020', 'GO:0007283', 'GO:0001614',
                                 'GO:0044212', 'GO:0006689', 'GO:0080019',
                                 'GO:0006950', 'GO:0048500', 'GO:0015321',
                                 'GO:0032228', 'GO:0004629', 'GO:0004623',
                                 'GO:0004152', 'GO:0019491', 'GO:0018149',
                                 'GO:0032797', 'GO:0032793', 'GO:0019867',
                                 'GO:0008483', 'GO:0008484', 'GO:0003341',
                                 'GO:0008488', 'GO:0006888', 'GO:0000902',
                                 'GO:0006884', 'GO:0006885', 'GO:0006886',
                                 'GO:0006887', 'GO:0008641', 'GO:0008643',
                                 'GO:0019031', 'GO:0008017', 'GO:0016787',
                                 'GO:0016785', 'GO:0016780', 'GO:0016788',
                                 'GO:0007050', 'GO:0007051', 'GO:0032481',
                                 'GO:0007219', 'GO:0005234', 'GO:0032957',
                                 'GO:0032956', 'GO:0007059', 'GO:0016070',
                                 'GO:0016075', 'GO:0016625', 'GO:0016670',
                                 'GO:0016671', 'GO:0032008', 'GO:0032007',
                                 'GO:0032006', 'GO:0016679', 'GO:0015079',
                                 'GO:0071469', 'GO:0007026', 'GO:0046579',
                                 'GO:0042073', 'GO:0016620', 'GO:0043240',
                                 'GO:0030955', 'GO:0043488', 'GO:0007129',
                                 'GO:0015672', 'GO:0015671', 'GO:0019237',
                                 'GO:0015923', 'GO:0030317', 'GO:0046373',
                                 'GO:0030036', 'GO:0006231', 'GO:0006098',
                                 'GO:0016255', 'GO:0016525', 'GO:0033314',
                                 'GO:0015813', 'GO:0015810', 'GO:0017124',
                                 'GO:0010824', 'GO:0006099', 'GO:0010826',
                                 'GO:0006097', 'GO:0006096', 'GO:0006094',
                                 'GO:0006529', 'GO:0005615', 'GO:0005965',
                                 'GO:0005618', 'GO:0033990', 'GO:0006520',
                                 'GO:0006526', 'GO:0043065', 'GO:0043066',
                                 'GO:0003730', 'GO:0048598', 'GO:0031683',
                                 'GO:0000278', 'GO:0000275', 'GO:0045087',
                                 'GO:0000276', 'GO:0000272', 'GO:0004965',
                                 'GO:0050750', 'GO:0050999', 'GO:0072345',
                                 'GO:0030532', 'GO:0005764', 'GO:0005765',
                                 'GO:0022857', 'GO:0005760', 'GO:0005761',
                                 'GO:0006419', 'GO:0005763', 'GO:0006417',
                                 'GO:0043113', 'GO:0006414', 'GO:0005768',
                                 'GO:0005769', 'GO:0006147', 'GO:0004497',
                                 'GO:0004496', 'GO:0004491', 'GO:0009452',
                                 'GO:0008108', 'GO:0009298', 'GO:0031591',
                                 'GO:0004367', 'GO:0004810', 'GO:0004813',
                                 'GO:0004812', 'GO:0004815', 'GO:0004814',
                                 'GO:0004817', 'GO:0004816', 'GO:0004819',
                                 'GO:0030623', 'GO:0005543', 'GO:0005544',
                                 'GO:0005547', 'GO:0004560', 'GO:0055114',
                                 'GO:0004567', 'GO:0008073', 'GO:0004383',
                                 'GO:0008076', 'GO:0004386', 'GO:0016891',
                                 'GO:0042998', 'GO:0001510', 'GO:0031461',
                                 'GO:0009072', 'GO:0001518', 'GO:0000015',
                                 'GO:0000012', 'GO:0039694', 'GO:0031666',
                                 'GO:0005381', 'GO:0004702', 'GO:0005388',
                                 'GO:0006614', 'GO:0018024', 'GO:0004037',
                                 'GO:0003938', 'GO:0003937', 'GO:0003934',
                                 'GO:0008253', 'GO:0008250', 'GO:0006948',
                                 'GO:0051028', 'GO:0036064', 'GO:0044262',
                                 'GO:0080025', 'GO:0009678', 'GO:0005158',
                                 'GO:0004631', 'GO:0004146', 'GO:0004144',
                                 'GO:0004143', 'GO:0004634', 'GO:0004637',
                                 'GO:0033557', 'GO:0019310', 'GO:0000049',
                                 'GO:0016758', 'GO:0006893', 'GO:0008652',
                                 'GO:0006891', 'GO:0006890', 'GO:0006897',
                                 'GO:0043666', 'GO:0008654', 'GO:0019799',
                                 'GO:0006898', 'GO:0019001', 'GO:0019005',
                                 'GO:0019008', 'GO:0046983', 'GO:0046982',
                                 'GO:0070694', 'GO:0015269', 'GO:0016791',
                                 'GO:0016790', 'GO:0046938', 'GO:0016799',
                                 'GO:0016798', 'GO:0007043', 'GO:0007040',
                                 'GO:0046556', 'GO:0032968', 'GO:0007049',
                                 'GO:0010569', 'GO:0071479', 'GO:0000808',
                                 'GO:0045502', 'GO:0033567', 'GO:0016668',
                                 'GO:0071253', 'GO:0034244', 'GO:0007131',
                                 'GO:0007130', 'GO:0006413', 'GO:0033699',
                                 'GO:0008381', 'GO:0016407', 'GO:1901031',
                                 'GO:0006412', 'GO:0016337', 'GO:0030328',
                                 'GO:0016339', 'GO:0009916', 'GO:0051638',
                                 'GO:0005819', 'GO:0005813', 'GO:0005814',
                                 'GO:0005815', 'GO:0016539', 'GO:0016538',
                                 'GO:0016531', 'GO:0016533', 'GO:0016532',
                                 'GO:0016534', 'GO:0017119', 'GO:0006418',
                                 'GO:0034755', 'GO:0047617', 'GO:0002098',
                                 'GO:0005606', 'GO:0005975', 'GO:0005977',
                                 'GO:0006559', 'GO:0006556', 'GO:0005978',
                                 'GO:0006555', 'GO:0051920', 'GO:0097111',
                                 'GO:0006396', 'GO:0006397', 'GO:0006777',
                                 'GO:0000244', 'GO:0000245', 'GO:0006778',
                                 'GO:0006779', 'GO:0004950', 'GO:0016926',
                                 'GO:0031054', 'GO:0047800', 'GO:0045987',
                                 'GO:0045980', 'GO:0045454', 'GO:0030054',
                                 'GO:0005779', 'GO:0005778', 'GO:0005777',
                                 'GO:0022865', 'GO:0055085', 'GO:0000087',
                                 'GO:0006177', 'GO:0031902', 'GO:0031901',
                                 'GO:0043123', 'GO:0031588', 'GO:0009448',
                                 'GO:0005154', 'GO:0004499', 'GO:0007606',
                                 'GO:0006606', 'GO:0007600', 'GO:0009443',
                                 'GO:0006605', 'GO:0005249', 'GO:0009288',
                                 'GO:0042450', 'GO:0004824', 'GO:0004826',
                                 'GO:0004827', 'GO:0004820', 'GO:0004822',
                                 'GO:0004823', 'GO:0004828', 'GO:0000398',
                                 'GO:0004555', 'GO:0004556', 'GO:0004550',
                                 'GO:0004553', 'GO:0045292', 'GO:0022604',
                                 'GO:0008009', 'GO:0051103', 'GO:0032266',
                                 'GO:0016881', 'GO:0009062', 'GO:0009060',
                                 'GO:0042989', 'GO:0016884', 'GO:0016887',
                                 'GO:0050515', 'GO:0016888', 'GO:0042981',
                                 'GO:0048168', 'GO:0004739', 'GO:0004731',
                                 'GO:0004733', 'GO:0004735', 'GO:0004736',
                                 'GO:0004047', 'GO:0004045', 'GO:0005549',
                                 'GO:0006952', 'GO:0006953', 'GO:0045335',
                                 'GO:0008716', 'GO:0006954', 'GO:0006955',
                                 'GO:0048011', 'GO:0048010', 'GO:0048013',
                                 'GO:0048015', 'GO:0001671', 'GO:0010155',
                                 'GO:0007422', 'GO:0004360', 'GO:0005540',
                                 'GO:0004609', 'GO:0005542', 'GO:0004602',
                                 'GO:0050811', 'GO:0032775', 'GO:0032777',
                                 'GO:0008622', 'GO:0019789', 'GO:0034968',
                                 'GO:0019013', 'GO:0019012', 'GO:0050333',
                                 'GO:2000601', 'GO:0015459', 'GO:0006400',
                                 'GO:0071797', 'GO:0051259', 'GO:0051258',
                                 'GO:0008532', 'GO:0008531', 'GO:0008536',
                                 'GO:0008537', 'GO:0008534', 'GO:0000812',
                                 'GO:0070461', 'GO:0016651', 'GO:0016868',
                                 'GO:0019307', 'GO:0030158', 'GO:0033227',
                                 'GO:0034508', 'GO:0042058', 'GO:0007140',
                                 'GO:0043461', 'GO:0033179', 'GO:0043967',
                                 'GO:0015693', 'GO:0015696', 'GO:0030337',
                                 'GO:0030992', 'GO:0030991', 'GO:0030334',
                                 'GO:0030332', 'GO:0030330', 'GO:0046429',
                                 'GO:0030338', 'GO:0048278', 'GO:0005801',
                                 'GO:0005802', 'GO:0007099', 'GO:0007094',
                                 'GO:0000796', 'GO:0007096', 'GO:0016500',
                                 'GO:0016641', 'GO:0007093', 'GO:0031110',
                                 'GO:0030429', 'GO:0010038', 'GO:0030422',
                                 'GO:0017108', 'GO:0006436', 'GO:0008527',
                                 'GO:0005942', 'GO:0043048', 'GO:0006545',
                                 'GO:0006544', 'GO:0043044', 'GO:0006541',
                                 'GO:0003712', 'GO:0006542', 'GO:0006388',
                                 'GO:0006384', 'GO:0006383', 'GO:0030155',
                                 'GO:0000256', 'GO:0030154', 'GO:0010970',
                                 'GO:0045995', 'GO:0031063', 'GO:0030041',
                                 'GO:0045944', 'GO:0030515', 'GO:0030042',
                                 'GO:0030512', 'GO:0000159', 'GO:0004114',
                                 'GO:0043130', 'GO:0006166', 'GO:0006165',
                                 'GO:0000155', 'GO:0043139', 'GO:0005125',
                                 'GO:0007638', 'GO:0008882', 'GO:0006613',
                                 'GO:0035023', 'GO:0015631', 'GO:0048487',
                                 'GO:0004833', 'GO:0004832', 'GO:0004831',
                                 'GO:0004830', 'GO:0048488', 'GO:0000387',
                                 'GO:0000381', 'GO:0004540', 'GO:0006139',
                                 'GO:0005230', 'GO:0008016', 'GO:0008013',
                                 'GO:0000030', 'GO:0003707', 'GO:0004725',
                                 'GO:0004721', 'GO:0045046', 'GO:0004055',
                                 'GO:0004057', 'GO:0004056', 'GO:0008705',
                                 'GO:0048029', 'GO:0023051', 'GO:0048024',
                                 'GO:0007411', 'GO:0007416', 'GO:0000723',
                                 'GO:0000724', 'GO:0018022', 'GO:0004612',
                                 'GO:0004611', 'GO:0004616', 'GO:0004615',
                                 'GO:0004619', 'GO:0004618', 'GO:0051304',
                                 'GO:0008380', 'GO:0008831', 'GO:0052689',
                                 'GO:0015194', 'GO:0007399', 'GO:0015204',
                                 'GO:0015205', 'GO:0045296', 'GO:0019843',
                                 'GO:0070679', 'GO:0019206', 'GO:0019205',
                                 'GO:0019752', 'GO:0016422', 'GO:0051301',
                                 'GO:0040001', 'GO:0040007', 'GO:0008521',
                                 'GO:0040008', 'GO:0051260', 'GO:0051262',
                                 'GO:0007530', 'GO:0019370', 'GO:0071230',
                                 'GO:0044267', 'GO:0007155', 'GO:0007154',
                                 'GO:0007156', 'GO:0008080', 'GO:0016429',
                                 'GO:0016428', 'GO:0030128', 'GO:0045672',
                                 'GO:0034421', 'GO:0070526', 'GO:0001937']

    def reduce_list(self, go_list=[], branch_count=20, avoid_roots=False,
                                      range_modifier=0.25, range_width=1,
                                      path_lengths=[], dijkstra_lengths=[],
                                      verbose=0):
        if verbose > 0:
            from pprint import pprint
        
        remaining = set([go_id for go_id in go_list
                         if go_id in self.obo_graph.nodes()])
        result_sets = {}
        flow_counts = {}
        flow_roots = {}
        branch_optimal = float(len(go_list))/branch_count
        
        for go_id in remaining:
            successors = set(self.obo_graph.successors(go_id))
            found_new = True
            while found_new:
                next_round = set(sum([self.obo_graph.successors(s)
                                      for s in successors], []))
                if len(next_round.union(successors)) > len(successors):
                    successors = next_round.union(successors)
                else:
                    found_new = False
            for s in successors:
                flow_counts.setdefault(s, set()).add(go_id)
            flow_counts.setdefault(go_id, set()).add(go_id)
        
        if avoid_roots:
            for root in self.obo_root:
                flow_roots[root] = [flow_counts.pop(root)]
                for alt_root in self.obo_graph.successors(root):
                    flow_roots[root].append(flow_counts.pop(alt_root))
        
        if dijkstra_lengths or path_lengths:
            for go_id in flow_counts.keys():
                (_,
                 dijkstra_length,
                 path_length) = self.get_root_distance_tuple(go_id)
                if not (dijkstra_length in dijkstra_lengths
                        or path_length in path_lengths):
                    flow_counts.pop(go_id)
        
        floor = range_width
        ceiling = range_width
        stuck = 0
        iteration = 0
        
        while len(remaining) > 0 or len(flow_counts) < 1:
            iteration += 1
            adjust = True
            possibilities = [(x, len(y), self.get_root_dijkstra(x), 
                              sum(self.find_lsca(x, _y)[2] for _y in y))
                             for x, y in flow_counts.items()
                             if (len(y) > branch_optimal*(
                                                    floor-range_modifier)
                                 and len(y) < branch_optimal*(
                                                    ceiling+range_modifier)
                            )]
            if possibilities:
                stuck = 0
                possibilities = sorted(possibilities,
                                       key=lambda x : (x[1]),
                                       reverse=True)
                current = possibilities[0]
                if verbose > 1:
                    print 'Iteration: %d:' % iteration
                    print (len(remaining), 
                           self.get_root_distance_tuple(current[0]))
                    if verbose > 2:
                        pprint(possibilities)
                    print ''
                if current[1] > 1:
                    current = current[0]
                else:
                    break
                result_sets[current] = flow_counts[current]
                current = frozenset(flow_counts.pop(current))
                remaining = remaining - current
                for node in flow_counts.keys():
                    flow_counts[node] = flow_counts[node] - current
                    if len(flow_counts[node]) < 1:
                        flow_counts.pop(node)
                adjust = False
            if adjust:
                if floor < ceiling:
                    floor -= range_modifier
                else:
                    ceiling += range_modifier
                
                if stuck > 9:
                    break
                else:
                    stuck += 1
        
        if verbose > 0:
            print 'Reduction list contains %d terms.' % len(result_sets)
            pprint(sorted([(r,
                            self.get_root_distance_tuple(r),
                            len(result_sets[r]),
                            self.obo_detail[r]['name'] if self.save_detail
                                                       else '')
                           for r in result_sets],
                          key=lambda x : x[2],
                          reverse=True))
            if verbose > 3:
                print 'Unable to reduce %d terms.' % len(remaining)
                pprint([(r,
                         self.get_root_distance_tuple(r),
                         self.obo_detail[r]['name'] if self.save_detail
                                                    else '')
                       for r in remaining])
        
        return result_sets
    
    def find_lsca(self, go_1, go_2):
        shared_root = None
        scored_root = float('inf')
        for root in self.obo_root:
            if (networkx.has_path(self.obo_graph, go_1, root)
                and networkx.has_path(self.obo_graph, go_2, root)):
                scored_temp = networkx.shortest_path_length(self.obo_graph,
                                                            go_1, root)**2
                scored_temp+= networkx.shortest_path_length(self.obo_graph,
                                                            go_2, root)**2
                if scored_temp < scored_root:
                    shared_root = root
                    scored_root = scored_temp
        if shared_root:
            neighbor_set_1 = networkx.single_source_dijkstra_path_length(
                                         self.obo_graph, go_1)
            neighbor_set_2 = networkx.single_source_dijkstra_path_length(
                                         self.obo_graph, go_2)
            combined_set = set(neighbor_set_1.keys()).intersection(
                                         set(neighbor_set_2.keys()))
            if len(combined_set) > 1:
                combined_set = [(go, 
                                 networkx.shortest_path_length(self.obo_graph,
                                                               go,
                                                               shared_root)
                                 if networkx.has_path(self.obo_graph,
                                                      go, shared_root)
                                 else float('inf'),
                                 float(neighbor_set_1[go]**2 
                                       + neighbor_set_2[go]**2))
                                for go in combined_set]
                combined_set = sorted(combined_set,
                                      key=lambda x : (x[1], -x[2]),
                                      reverse=True)
                return combined_set[0]
            elif len(combined_set) > 0:
                return (shared_root, 0, float(neighbor_set_1[shared_root]**2
                                              + neighbor_set_2[shared_root]**2))
            else:
                raise ValueError, ('It has been shown that both %s and %s share'
                                   + ' a root at %s. As such, the intersection'
                                   + ' of their neighboring node sets cannot be'
                                   + ' empty.') % (go_1, go_2, shared_root)
        else:
            return (None, float('inf'), float('inf'))

    def get_root(self, go_id):
        return self.get_root_distance_tuple(go_id)[0]

    def get_root_dijkstra(self, go_id):
        return self.get_root_distance_tuple(go_id)[1]
    
    def get_root_distance(self, go_id):
        return self.get_root_distance_tuple(go_id)[2]

    def get_root_distance_tuple(self, go_id):
        root = None
        root_dijkstra = float('inf')
        root_distance = float('inf')
        for r_id in self.obo_root:
            if networkx.has_path(self.obo_graph, go_id, r_id):
                temp_dijkstra = networkx.dijkstra_path_length(self.obo_graph,
                                                              go_id, r_id)
                if temp_dijkstra < root_dijkstra:
                    root = r_id
                    root_dijkstra = temp_dijkstra
                    root_distance = networkx.shortest_path_length(self.obo_graph,
                                                                  go_id, r_id)
        return root, root_dijkstra, root_distance

    def generate_detail(self):
        self.obo_header = {}
        self.obo_detail = {}
        self.obo_graph = networkx.DiGraph()
        self.save_detail = True
        obo_handle = self._prepare_file(self.obo_path)
        try:
            self._parse_file(obo_handle, self.save_detail)
        except:
            print traceback.format_exc()
            pass
        finally:
            obo_handle.close()

    def _prepare_file(self, filepath=None):
        fh = None
        try:
            if filepath:
                fh = open(filepath, 'r')
            else:
                try:
                    fh = open('go.obo', 'r')
                except:
                    fh = open('go-basic.obo', 'r')
        except:
            try:
                fh.close()
            except:
                pass
            finally:
                raise IOError, 'Cannot locate gene ontology source file.'
        return fh

    def _parse_file(self, fh, save_detail=None):
        # Utilizing a networkx.DiGraph() over a simple dictionary saves
        #    ~38% in terms of memory usage.
        if save_detail is None:
            save_detail = self.save_detail
        
        in_file = False
        in_term = False
        cur_key = None
        cur_val = {}
        
        # Read the file, line-by-line, and filter the results into
        #   a dictionary.
        for line in fh:
            # All information read prior to the first occurrence of a term
            #   block is parsed in and recorded as header information. Once
            #   We encounter our first term block, we consider ourselves to
            #   have entered the body of the file, and the in_file flag is 
            #   set to True.
            if in_file:
                # We consider ourself to be in the in_term state once we've
                #   passed the OBO file header. 
                #   (Once we observe the string '[Term]'.)
                if in_term:
                    # When we observe a line with nothing but a newline
                    #   character, and are inside of a term block, we've
                    #   finished parsing the term, and can clean the
                    #   resulting dictionary.
                    if '\n' == line:
                        # We're no longer in a term block, so we set the
                        #   term flag to False.
                        in_term = False
                        # If we have synonyms, which appear in the form:
                        #     '"go_term" RELATION []'
                        #   we split the string into its parts, and
                        #   organize according to relation type.
                        #   As a side note, the go_term in a synonym
                        #   is encoded as an english phrase, rather than
                        #   as a unique GO id, and the relation is stored
                        #   as a completely capitalized string.
                        if 'synonym' in cur_val:
                            synonyms = cur_val.pop('synonym')
                        else:
                            synonyms = None
                        if synonyms:
                            cur_val['synonym'] = {}
                            for synonym in synonyms:
                                (plaintext,
                                 relation_type,
                                 _) = synonym.rsplit(' ', 2)
                                cur_val['synonym'].setdefault(
                                  relation_type.lower(), []).append(plaintext)

                        # If we have relationships, which appear in the form:
                        #     'relation go_id'
                        #   we split the string into its parts, and organize
                        #   according to the relation type. As a note, the
                        #   linked go_id is the unique GO id.
                        if 'relationship' in cur_val:
                            relationships = cur_val.pop('relationship')
                        else:
                            relationships = None
                        if relationships:
                            for relationship in relationships:
                                (relation_type,
                                 go_id) = relationship.rsplit(' ', 1)
                                cur_val.setdefault(
                                  relation_type, []).append(go_id)
                        
                        modifiable = [cur_key] 
                        
                        if 'alt_id' in cur_val:
                            for go_id in cur_val['alt_id']:
                                self.obo_graph.add_edge(cur_key, go_id,
                                                        weight=0)
                                self.obo_graph.add_edge(go_id, cur_key,
                                                        weight=0)
                                modifiable.append(go_id)
                        
                        for go_src in modifiable:
                            for relation in self.obo_relations:
                                if relation in cur_val:
                                    for go_id in cur_val[relation]:
                                        self.obo_graph.add_edge(
                                                  go_src, go_id,
                                                  weight=self.weights[relation])

                        # As a final step, we store the cleaned dictionary.
                        if save_detail:
                            self.obo_detail[cur_key] = cur_val
                    # If the line contains anything besides a newline character,
                    #   then we're currently in a term block.
                    else:
                        # Term attributes are stored in the following form:
                        #     'attribute_type: attribute_value'
                        #   We split the string into its parts, and store.
                        try:
                            k, v = [p.strip() for p in line.split(':', 1)]
                        except:
                            print line
                            raise IOError(('Error encountered in parsing'
                                           + ' OBO file.'))

                        # Once we've found the id field, we know which go term
                        #   we're currently reading.
                        if k == 'id':
                            cur_key = v
                            self.obo_graph.add_node(v)
                        # Occasionally, attributes have extra information:
                        #     'attribute_type: attribute_value ! information'
                        #   We remove this information during cleaning.
                        else:
                            v = v.split('!')[0].strip()
                            cur_val.setdefault(k, []).append(v)
                # If we aren't in a term block, but our line contains
                #   '[Term]', we know we've entered a term block, and
                #   set our boolean flags accordingly.
                elif '[Term]' in line:
                    in_term = True
                    cur_key = None
                    cur_val = {}
            # If we aren't yet in the body of the file, we parse information
            #   and record under the assumption that it is part of the file's
            #   header.
            else:
                # This is a bit of a lazy check. In accordance with OBO format,
                #   we know that each line will contain an attribute key value
                #   pair. Once this no longer occurs, ergo, once Python fails
                #   to split a line into two parts around a colon, we know we've
                #   exited the header block.
                try:
                    k, v = [p.strip() for p in line.split(':', 1)]
                    self.obo_header.setdefault(k, []).append(v)
                except ValueError:
                    in_file = True
                except:
                    print traceback.format_exc()
                    raise IOError, ('Encountered unexpected line in OBO header.'
                                    + ' on line:\n%s.') % line
        
        if save_detail is True:
            # As a cursory stage in the final cleaning process for the generated
            #   obo_detail dictionary, we create new fields 'root' and 'level',
            #   and generate a set of child terms using the 'is_a' relations
            #   from each go term. This is then stored under the field name
            #   'contains'.
            for g_id in self.obo_detail:
                self.obo_detail[g_id]['root'] = None
                self.obo_detail[g_id]['level'] = None
                if 'contains' not in self.obo_detail[g_id]:
                    self.obo_detail[g_id]['contains'] = set()
                if 'is_a' in self.obo_detail[g_id]:
                    for p_id in self.obo_detail[g_id]['is_a']:
                        self.obo_detail[p_id].setdefault('contains', 
                                                         set()).add(g_id)
                if 'alt_id' in self.obo_detail[g_id]:
                    self.obo_detail[g_id]['alt_id'] = frozenset(
                                            self.obo_detail[g_id]['alt_id'])
            
            # After the set objects in our dictionary are finalized, we cast
            #   them as frozensets to improve comparison time. We also reduce
            #   each list with one element to a single element. Typically the
            #   reduced fields are 'def', 'name', and 'namespace'.
            for g_id in self.obo_detail:
                for k, v in self.obo_detail[g_id].items():
                    if isinstance(v, set) or k in self.obo_relations:
                        v = frozenset(v)
                    elif isinstance(v, list) and len(v) == 1:
                        v = v[0]
                    self.obo_detail[g_id][k] = v
            
            # Lastly, we iterate over the dictionary using depth-first-search,
            #   starting with each root node. In this way, we set the 'root'
            #   and 'level' fields of each go term in our dictionary. We note
            #   that we rely on the 'is_a' relations stored in the 'contains'
            #   field when constructing our 'root' and 'level' fields; due to
            #   this, we are ensured not to match multiple roots to the same
            #   go term. For further information, see:
            #     http://geneontology.org/page/ontology-structure#oneorthree
            #   If a term is left without a 'root' and 'level' field following
            #   this process, it is an obsolete term.
            for r_id in self.obo_root:
                visited = set()
                options = [(r_id, 0)]
                while options:
                    n_id, n_ht = options.pop(0)
                    if n_id not in visited:
                        visited.add(n_id)
                        self.obo_detail[n_id]['root'] = r_id
                        self.obo_detail[n_id]['level'] = n_ht
                        options.extend(
                          [(x, n_ht+1) for x in 
                            self.obo_detail[n_id]['contains'] - visited]
                        )
    
            for g_id in self.obo_detail.keys():
                if 'alt_id' in self.obo_detail[g_id]:
                    for a_id in self.obo_detail[g_id]['alt_id']:
                        self.obo_detail[a_id] = self.obo_detail[g_id]

        # As a final step, we perform simple cleaning of our header data.
        for k, v in self.obo_header.items():
            if isinstance(v, list) and len(v) == 1:
                v = v[0]
            self.obo_header[k] = v
        
        if 'date' in self.obo_header:
            try:
                self.date = datetime.datetime.strptime(
                              self.obo_header['date'],
                              "%d:%m:%Y %H:%M")
            except:
                self.date = None
            
            if self.date:
                distance = (datetime.datetime.now() 
                            - self.date).total_seconds()
                print (('Parsed GO ontology dump is %0.2f hours old. '
                        + '(%0.1f days)')
                       % (distance / 3600, distance / 86400))
            else:
                print 'Parsed GO ontology contained no date information. (!)'
        
        byte_count = float(asizeof(self))
        Mbyte_count = byte_count / 10**6
        
        print (('Memory used to store parse_obo object: %d bytes.'
                + ' (%0.2f megabytes)')
               % (byte_count, Mbyte_count))

    def _generate_test_csv(self):
        _15_default = self.reduce_list(self.__uncc_test_list,
                                       branch_count=15)
        _1 = {}
        for k, v in _15_default.items():
            for _v in v:
                _1[_v] = k
        _30_default = self.reduce_list(self.__uncc_test_list,
                                       branch_count=30)
        _2 = {}
        for k, v in _30_default.items():
            for _v in v:
                _2[_v] = k
        _45_default = self.reduce_list(self.__uncc_test_list,
                                       branch_count=45)
        _3 = {}
        for k, v in _45_default.items():
            for _v in v:
                _3[_v] = k
        _60_default = self.reduce_list(self.__uncc_test_list,
                                       branch_count=60)
        _4 = {}
        for k, v in _60_default.items():
            for _v in v:
                _4[_v] = k
        
        _15_avoid = self.reduce_list(self.__uncc_test_list,
                                     branch_count=15,
                                     avoid_roots=True)
        _5 = {}
        for k, v in _15_avoid.items():
            for _v in v:
                _5[_v] = k
        _30_avoid = self.reduce_list(self.__uncc_test_list,
                                     branch_count=30,
                                     avoid_roots=True)
        _6 = {}
        for k, v in _30_avoid.items():
            for _v in v:
                _6[_v] = k
        _45_avoid = self.reduce_list(self.__uncc_test_list,
                                     branch_count=45,
                                     avoid_roots=True)
        _7 = {}
        for k, v in _45_avoid.items():
            for _v in v:
                _7[_v] = k
        _60_avoid = self.reduce_list(self.__uncc_test_list,
                                     branch_count=60,
                                     avoid_roots=True)
        _8 = {}
        for k, v in _60_avoid.items():
            for _v in v:
                _8[_v] = k
        
        _15_2range = self.reduce_list(self.__uncc_test_list,
                                      branch_count=15,
                                      range_width=2,
                                      avoid_roots=True,
                                      path_lengths=[1])
        _9 = {}
        for k, v in _15_2range.items():
            for _v in v:
                _9[_v] = k
        _30_2range = self.reduce_list(self.__uncc_test_list,
                                      branch_count=30,
                                      range_width=2,
                                      avoid_roots=True,
                                      path_lengths=[1,2])
        _10 = {}
        for k, v in _30_2range.items():
            for _v in v:
                _10[_v] = k
        _45_2range = self.reduce_list(self.__uncc_test_list,
                                      branch_count=45,
                                      range_width=2,
                                      dijkstra_lengths=[1,2,3])
        _11 = {}
        for k, v in _45_2range.items():
            for _v in v:
                _11[_v] = k
        _45_3range = self.reduce_list(self.__uncc_test_list,
                                      branch_count=45,
                                      range_width=3,
                                      dijkstra_lengths=[1,2,3])
        _12 = {}
        for k, v in _45_3range.items():
            for _v in v:
                _12[_v] = k
        
        with open('uncc_test_go_mapping.csv', 'w') as fh:
            fh.write('go_term,15_default,30_default,45_default,60_default'
                     + '15_avoid_roots=True,30_avoid_roots=True,'
                     + '45_avoid_roots=True,60_avoid_roots=True,'
                     + '15_range_width=2|avoid_roots=True|path_lengths=[1],'
                     + '30_range_width=2|avoid_roots=True|path_lenghts=[1|2],'
                     + '45_range_width=2|dijkstra_lengths=[1|2|3],'
                     + '45_range_width=3|dijkstra_lengths=[1|2|3]\n')
            for go_term in sorted(self.obo_graph.nodes()):
                fh.write(go_term)
                for map in [_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12]:
                    fh.write(',')
                    if go_term in map:
                        fh.write(map[go_term])
                    else:
                        fh.write(go_term)
                fh.write('\n')

    ### METHODS PAST THIS POINT REQUIRE OBO_DETAIL IN ORDER TO RUN ###

    def dump_obo_detail_to_file(self, filename='go-detail.json'):
        if not self.save_detail is True or self.obo_detail is {}:
            raise NotImplementedError, ('Not implemented when save_detail flag'
                                        + ' is set to False.')
        
        with open(filename, 'w') as fh:
            fh.write(json.dumps(self.obo_detail,
                                sort_keys=True,
                                indent=2,
                                separators=(',', ': '),
                                cls=SimpleSafeJSON))

    def dump_pseudotree_to_file(self, filename='go.json'):
        if not self.save_detail is True or self.obo_detail is {}:
            raise NotImplementedError, ('Not implemented when save_detail flag'
                                        + ' is set to False.')
        
        tree = {}
        for r in self.obo_root:
            tree[r] = {}
        for k, v in self.obo_detail.items():
            if v['root']:
                tree[v['root']].setdefault(v['level'], []).append(k)
        with open(filename, 'w') as fh:
            fh.write(json.dumps(tree,
                                sort_keys=True,
                                indent=2,
                                separators=(',', ': ')))

    ### METHODS PAST THIS POINT ARE DEPRECIATED AND RELY ON OBO_DETAIL ###

    def reduce_list_by_detail(self, go_list=[], branch_count=20, weights=None):
        raise NotImplementedError
        
        if not self.save_detail is True or self.obo_detail is {}:
            raise NotImplementedError, ('Not implemented when save_detail flag'
                                        + ' is set to False.')
        
        if weights is None:
            weights = self.weights
        
        if (not isinstance(weights, dict)
            or len(weights) < 1):
            print 'Provided weights must be stored as a non-empty dictionary'
            print 'with the following format:'
            print '  {'
            for relation in self.obo_relations:
                print "    '" + str(relation) + "': #,"
            print '  }'
            print 'If a relation is left out of the weights dictionary, it'
            print 'will be ignored while reducing the go_list.'
            raise TypeError('User provided improperly formatted weights'
                            + ' dictionary.')
        
        if not isinstance(go_list, list) or len(go_list) == 0:
            print ('Provided go_list must be a non-empty list or dictionary of '
                   + 'go terms.')
            return TypeError('User provided improperly formatted go term list.')
        
        for k in weights:
            if k not in self.obo_relations:
                weights.pop(k)
                print ('"' + str(k) + '" is not a valid relation type and will'
                       + ' be ignored. (!)')
        
        res = self._reduce_list_by_detail(go_list, branch_count, weights)
        
        return res

    def find_lsca_by_detail(self, go_1, go_2, weights=None):
        if not self.save_detail is True or self.obo_detail is {}:
            raise NotImplementedError, ('Not implemented when save_detail flag'
                                        + ' is set to False.')
        
        if weights is None:
            weights = self.weights
        if set(weights.keys()) == set(self.obo_disjoint):
            if ((go_1 in self.obo_detail and go_2 in self.obo_detail)
                 and self.obo_detail[go_1]['root']
                 and self.obo_detail[go_2]['root']
                 and (self.obo_detail[go_1]['root'] ==
                      self.obo_detail[go_2]['root'])):
                pass
            else:
                return (None, float('inf'), float('inf'))

        terms = {go_1 : None, go_2 : None}
        for term in terms:
            remaining = [(term, 0)]
            options = {term : 0}
            while remaining:
                n_id, n_wt = remaining.pop()
                for path in weights:
                    if path in self.obo_detail[n_id]:
                        for p_id in self.obo_detail[n_id][path]:
                            if p_id not in options:
                                options[p_id] = n_wt + weights[path]
                                remaining.append((p_id, n_wt + weights[path]))
            terms[term] = options
        
        res_id = None
        res_depth = 0
        res_score = float('inf')
        for option in set(terms[go_1].keys()).intersection(terms[go_2].keys()):
            option_depth = self.obo_detail[option]['level']
            option_score = math.sqrt(math.pow(terms[go_1][option], 2)
                                     + math.pow(terms[go_2][option], 2))
            if option_depth > res_depth:
                res_id = option
                res_depth = option_depth
                res_score = option_score
            elif option_depth == res_depth:
                if option_score < res_score:
                    res_id = option
                    res_score = option_score
        
        return (res_id, res_depth, res_score)
    
    def _lsca_run_test(self, option_list=None, weights=None,
                       num_threads=None, verbose=False):
        
        if not self.save_detail is True or self.obo_detail is {}:
            def _find_lsca(go_1, go_2):
                r_id, r_dp, r_sc = self.find_lsca(go_1, go_2)
                return (r_id, r_dp, r_sc, go_1, go_2)
        else:
            def _find_lsca(go_1, go_2):
                r_id, r_dp, r_sc = self.find_lsca_by_detail(go_1, go_2, weights)
                return (r_id, r_dp, r_sc, go_1, go_2)
        
        def cbrt(x):
            return math.pow(x, 1.0/3.0)
        
        class print_thread(threading.Thread):
            def __init__(self, p, t=1):
                threading.Thread.__init__(self)
                self.print_queue = p
                self.last_caller = None
                self.running = True
                self.timeout = t
                self.daemon = True
            
            def run(self):
                while self.running:
                    try:
                        n, s, f = self.print_queue.get(timeout=self.timeout)
                        if self.last_caller and n != self.last_caller:
                            self.fprint('\n', None)
                        self.last_caller = n
                        self.fprint(s=s, f=f)
                    except Queue.Empty:
                        pass
            
            def fprint(self, s, f=()):
                if not f:
                    f = ()
                sys.stdout.write('\r')
                sys.stdout.write(s.replace('\t', '    ') % f)
                sys.stdout.flush()
            
            def terminate(self):
                self.running = False
                self.fprint('\n')
        
        class run_test_thread(multiprocessing.Process):
            def __init__(self, i, r, p, t=3, name=None, verbose=False):
                multiprocessing.Process.__init__(self)
                self.internal_queue = i
                self.response_queue = r
                self.printing_queue = p
                self.timeout = t
                self.destroy = multiprocessing.Event()
                self.daemon = True
                self.name = name if name else 'Process-' + str(self.pid)
                self.verbose = verbose
            
            def run(self):
                if self.verbose:
                    self.printing_queue.put(
                      (self.name,
                       "%s is now active.",
                       (self.name))
                    )
                
                while not self.destroy.is_set():
                    try:
                        n_1, n_2 = self.internal_queue.get(timeout=self.timeout)
                        if self.verbose:
                            self.printing_queue.put(
                              (self.name,
                               "%s has (%s, %s).",
                               (self.name, n_1, n_2))
                            )
                        self.response_queue.put(_find_lsca(n_1, n_2))
                    except Queue.Empty:
                        pass
                    
                if self.verbose:
                    self.printing_queue.put(
                      (self.name,
                       "%s is now inactive.",
                       (self.name))
                    )
            
            def terminate(self):
                self.destroy.set()
        
        class capture_thread(threading.Thread):
            def __init__(self, w, r, t=3):
                threading.Thread.__init__(self)
                self.watch_queue = w
                self.running = True
                self.last_job = None
                self.pause = float(0)
                self.num_jobs = int(0)
                self.result_dict = r
                self.timeout = t
                self.daemon = True
            
            def run(self):
                while self.running:
                    try:
                        r_id, r_dp, r_sc, go_1, go_2 = self.watch_queue.get(
                                                         timeout=self.timeout)
                        self.num_jobs += 1
                        # Filtering out null results here saves ~38% in terms
                        #   of memory usage.
                        if r_id:
                            self.last_job = time.time()
                            self.result_dict[go_1][go_2] = {'merge' : r_id,
                                                            'depth' : r_dp,
                                                            'score' : r_sc}
                            # Reflecting by reference here saves an additional 
                            #    ~31% in terms of memory usage.
                            self.result_dict[go_2][go_1] = self.result_dict[go_1][go_2]
                            self.pause = (self.pause 
                                          + (time.time() - self.last_job)
                                         ) / 2.0
                    except Queue.Empty:
                        pass
            
            def terminate(self):
                self.running = False
                time.sleep(self.timeout)
            
            def finished(self):
                return self.num_jobs
            
            def sleep_time(self):
                return self.pause
            
            def get_results(self):
                return self.result_dict

        if weights is None:
            weights = self.weights

        thread_messages = multiprocessing.Queue()
        thread_requests = multiprocessing.Queue()
        thread_response = multiprocessing.Queue()
        
        if num_threads:
            thread_count = num_threads
        else:
            thread_count = max(1, psutil.cpu_count())
        
        threads = []
        print_thread = print_thread(thread_messages)
        print_thread.start()
        for i in range(thread_count):
            _t = run_test_thread(thread_requests,
                                 thread_response,
                                 thread_messages,
                                 name='Process-'+str(i),
                                 verbose=verbose)
            threads.append(_t)
            _t.start()
            time.sleep(0.2)

        thread_messages.put(('MainThread',
                             'Currently initializing term set.\n',
                             None))
        if not self.save_detail is True or self.obo_detail is {}:
            if option_list:
                options = frozenset(
                  [option for option in option_list
                   if option in self.obo_graph.nodes()])
            else:
                options = frozenset(self.obo_graph.nodes())
        else:
            if option_list:
                options = frozenset(
                  [option for option in option_list
                   if option in self.obo_detail.keys()])
            else:
                options = frozenset(self.obo_detail.keys())
        thread_messages.put(('MainThread',
                             '\tTerm set initialized.\n',
                             None))

        tested = set()
        count = 0
        total = len(options)*(len(options)+1)*0.5
        mod = math.floor(cbrt(total))
        
        thread_messages.put(('MainThread',
                             'Instantiating dictionary to hold result set.\n',
                             None))
        result_dict = {}
        for go in options:
            result_dict[go] = {}
        capture_thread = capture_thread(thread_response, result_dict)
        capture_thread.start()
        threads.append(capture_thread)
        thread_messages.put(('MainThread',
                             '\tDictionary instantiated.\n',
                             None))

        for _1 in options:
            for _2 in options - tested:
                count += 1
                if math.fmod(count, mod) == 1.0:
                    thread_messages.put(
                      ('MainThread',
                       'Prepared  %d of %d possible combinations. (%0.5f%%)',
                       (count, total, float(count)/total*100))
                    )
                thread_requests.put((_1, _2))
            tested.add(_1)
        thread_messages.put(
          ('MainThread',
           'Prepared  %d of %d possible combinations. (%0.5f%%)\n',
           (count, total, float(count)/total*100))
        )
        
        while not thread_requests.empty():
            thread_messages.put(
              ('MainThread',
               'Processed %d of %d possible combinations. (%0.5f%%)',
               (total - thread_requests.qsize(),
                total,
                float(total - thread_requests.qsize())/total*100))
            )
            time.sleep(capture_thread.sleep_time() * mod)
        thread_messages.put(
          ('MainThread',
           'Processed %d of %d possible combinations. (%0.5f%%)\n',
           (total - thread_requests.qsize(),
            total,
            float(total - thread_requests.qsize())/total*100))
        )
        
        while capture_thread.finished() < total:
            thread_messages.put(
              ('MainThread',
               'Stored    %d of %d possible combinations. (%0.5f%%)',
               (capture_thread.finished(),
                total,
                float(capture_thread.finished())/total*100))
            )
            time.sleep(capture_thread.sleep_time() * mod)
        thread_messages.put(
          ('MainThread',
           'Stored    %d of %d possible combinations. (%0.5f%%)\n',
           (capture_thread.finished(),
            total,
            float(capture_thread.finished())/total*100))
        )
        
        thread_messages.put(
          ('MainThread',
           'Closing processes and cleaning up.',
           None)
        )
        
        for thread in threads:
            thread.terminate()
        
        for thread in threads:
            thread.join()
        
        thread_requests.close()
        thread_requests.join_thread()
        
        thread_response.close()
        thread_response.join_thread()
        
        print_thread.terminate()
        print_thread.join()
        
        thread_messages.close()
        thread_messages.join_thread()
        
        res = capture_thread.get_results()
        
        if verbose:
            print 'Memory used to store test results: %d bytes.' % asizeof(res)
        
        return res

class SimpleSafeJSON(json.JSONEncoder):
    def default(self, obj, safe_method=repr):
        if isinstance(obj, (set, frozenset)):
            return list(obj)
        else:
            try:
                return json.JSONEncoder.default(self, obj)
            except:
                return json.JSONEncoder.default(self, safe_method(obj))